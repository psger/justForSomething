#--------------------------------------------全局模块
# 运行Nginx进程的用户以及用户组
user  www www;

# Nginx开启的进程数，通常设置成和cpu的数量相等
worker_processes  1;
# worker_processes auto;
# 也可以指定哪个cpu分配给哪个进程（不常用）。
# 如果一定要设的话，用0和1指定分配方式。
# 下面的例子是给4个进程分配单独的核来运行，出现第5个进程是就随机分配了。
#worker_processes 4     # 4核CPU
#worker_cpu_affinity 0001 0010 0100 1000

# 定义存储某类型的全局错误的日志位置
# 错误类型为可能为[debug | info | notice | warn | error | crit]
#error_log  logs/error.log;
#error_log  logs/error.log  notice;  # notice类错误放在logs/error.log内
#error_log  logs/error.log  info;

# 指定进程ID（pid）存放的路径
#pid        logs/nginx.pid;

#--------------------------------------------事件模块
events {
    # 每个进程的最大连接数
    worker_connections  1024;
}

#--------------------------------------------HTTP模块
http {
    # 引入文件 mime.types，是一个文件扩展名与文件类型的映射表
    include       mime.types;
    # 指定默认MIME类型为二进制字节流
    default_type  application/octet-stream;

    # 定义输出日志的格式
    # 1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；
    # 2.$remote_user ：用来记录客户端用户名称；
    # 3.$time_local ：用来记录访问时间与时区；
    # 4.$request  ：用来记录请求的url与http协议；
    # 5.$status ：用来记录请求状态；
    # 6.$body_bytes_sent ：记录发送给客户端文件主体内容大小；
    # 7.$http_referer ：用来记录从那个页面链接访问过来的；
    # 8.$http_user_agent ：记录客户端浏览器的相关信息
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # 指定access_log的存放路径、格式和缓存大小
    #access_log  logs/access.log  main;

    # sendfile 指令用于指定 Nginx 是否调用Linux 的 sendfile 函数（zero copy 方式）来输出文件，提高文件传输效率
    sendfile        on;

    # 是否允许使用socket的TCP_NOPUSH或TCP_CORK选项
    #tcp_nopush     on;

    # 指定客户端连接保持活动的超时时间（单位：秒），超过时间，服务器会关闭连接
    #keepalive_timeout  0;
    keepalive_timeout  65;

    # 开启gzip压缩
    #gzip  on;

    # 虚拟主机定义
    server {
        # 监听端口
        listen       80;
        # 访问域名
        server_name  localhost;

        # 编码格式，若网页格式与此不同，将被自动转码
        #charset koi8-r;

        # 虚拟主机访问日志定义
        #access_log  logs/host.access.log  main;

        # 匹配URL
        location / {
            # 定义默认网站根目录位置
            root   html;
            # 定义首页索引文件的名称，按以下顺序匹配
            index  index.html index.htm index.php;
        }

        # 发生 404 错误时返回 404.html页面
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # 发生 50x 错误时使用 50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy_pass 设置反向代理
        # 下面的设置是将所有的 .php 文件交给 Apache 处理
        # proxy the PHP scripts to Apache listening on 128.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # 将 PHP 脚本请求全部转发给 FastCGI（127.0.0.1:9000）处理
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            root           /var/www/;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            # 引入文件，fastcgi的默认配置参数
            include        fastcgi_params;
        }

        # 禁止访问 .ht 页面
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    # 另一个虚拟主机的配置，通过端口区分
    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # HTTPS 虚拟主机定义
    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
